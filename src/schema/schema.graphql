type Mutation {
	createUser(user: CreateUserInput!): User!
	removeAdmin(userId: Int!): Boolean!
	loginUser(credentials: LoginUserInput!): LoginReturn!
	createProduct(product: ProductInput!): Product!
	editProduct(product: EditProductInput!): Product!
	createProductGroup(productGroup: ProductGroupInput!): ProductGroup
	deleteProduct(productId: Int!): Boolean!
	editConfig(config: ConfigInput!): Boolean!
	createOrder(order: OrderInput!): OrderReturn
}

type OrderReturn {
	id: ID!
	valid: Boolean!
}

input OrderInput {
	id: ID!
	amount: Int!
	user: CustomerInput!
	shipping: ShippingInput!
	description: String!
	cart: [CartItem]!
}

input CartItem {
	name: String!
	quantity: Int!
}

input ShippingInput {
	zip: String!
	state: String!
	address: String!
}

input CustomerInput {
	email: String!
	name: String!
	id: ID!
}

input ConfigInput {
	id: Int!
	value: String!
}

input ProductGroupInput {
	type: String!
}

input ProductInput {
	name: String!
	price: Int!
	image: String!
	productGroupId: Int!
	enabled: String!
	description: String
}

input EditProductInput {
	id: ID!
	name: String
	price: Int
	image: String
	enabled: String
	productGroupId: Int
	description: String
}

type Product {
	id: ID!
	name: String!
	price: Int!
	image: String!
	productGroupId: Int!
	description: String!
	enabled: String!
}

type ProductGroup {
	id: ID!
	type: String!
	products: [Product]!
}

type Query {
	user(userId: ID!): User
	products(productGroupId: Int!): [Product]
	productGroups: [ProductGroup]
	adminUsers: [User]!
	getConfig: [Config]
	allProducts: [Product]
	product(id: ID!): Product
}

type Config {
	id: ID!
	type: String!
	value: String!
}

type LoginReturn {
	user: User!
	token: String!
}

input CreateUserInput {
	name: String!
	username: String!
	password: String!
	type: String
}

input LoginUserInput {
	username: String!
	password: String!
}

type User {
	id: ID!
	name: String!
	username: String!
	type: String!
	createdAt: String!
}

type schema {
	query: Query
	mutation: Mutation
}
